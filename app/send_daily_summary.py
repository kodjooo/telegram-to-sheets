import os
import json
import gspread
from collections import defaultdict
from oauth2client.service_account import ServiceAccountCredentials
from telethon import TelegramClient
import asyncio
from datetime import datetime

# –ü—É—Ç–∏
BASE_DIR = '/app'
CONFIG_PATH = os.path.join(BASE_DIR, 'config.json')
CREDENTIALS_FILE = os.path.join(BASE_DIR, 'google-credentials.json')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open(CONFIG_PATH, 'r') as f:
    config = json.load(f)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client_gs = gspread.authorize(creds)
spreadsheet = client_gs.open_by_key(config['google_sheet_id'])
sheet = spreadsheet.worksheet('Groups')

# –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
rows = sheet.get_all_values()
if not rows or len(rows) < 2:
    message = "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."
else:
    header = rows[0]
    category_idx = header.index("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    count_1d_idx = header.index("–ó–∞ 1 –¥–µ–Ω—å")

    category_counts = defaultdict(int)
    empty_category_count = 0

    for row in rows[1:]:
        try:
            count = int(row[count_1d_idx])
        except:
            continue

        category = row[category_idx].strip() if len(row) > category_idx else ''
        if category:
            category_counts[category] += count
        else:
            empty_category_count += count

    total = sum(category_counts.values()) + empty_category_count
    date_str = datetime.now().strftime('%d.%m.%Y')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    message_lines = [f"üßæ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {date_str} ({total} –≤—Å–µ–≥–æ):"]
    for cat, count in sorted(category_counts.items(), key=lambda x: -x[1]):
        message_lines.append(f"‚Ä¢ {cat}: {count}")
    if empty_category_count:
        message_lines.append(f"‚Ä¢ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {empty_category_count}")

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
    message_lines.append("\nüëâ [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://docs.google.com/spreadsheets/d/1eSuLIAlnxkZHA4jy2cBZVwWiA__NZ3pl5hncxU7O3RU/edit?gid=807594473)")

    message = "\n".join(message_lines)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async def send_message():
    session_file = os.path.join(BASE_DIR, config['session_name'])
    client = TelegramClient(session_file, config['api_id'], config['api_hash'])
    await client.start()
    await client.send_message(
        config['report_channel_id'],
        message,
        parse_mode='markdown',
        link_preview=False  # –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
    )
    await client.disconnect()

if __name__ == '__main__':
    asyncio.run(send_message())